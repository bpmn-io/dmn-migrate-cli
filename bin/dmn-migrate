#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const glob = require('fast-glob').sync;

const {
  migrateDiagram,
  TARGET_DMN_VERSION
} = require('@bpmn-io/dmn-migrate');

const args = require('mri')(process.argv, {
  alias: {
    h: 'help',
    i: 'input',
    o: 'output'
  }
});

if (args.version) {
  console.log(require('../package').version);

  process.exit(0);
}

if (args.help) {

  console.log(`
  Migrate your DMN diagrams to DMN ${TARGET_DMN_VERSION}.

  Usage
    $ dmn-migrate -o [file|directory] [...inputs]

    Inputs may be glob patterns, too.
    If no input is given we read from stdin.

  Options
    --output,  -o   Output file or directory. Output directory must
                    end with file separator. If not given we pipe to
                    stdout.

  Examples
    $ dmn-migrate -o bar.dmn foo.dmn
    $ dmn-migrate -o migrated/ *.dmn
    $ cat foo.dmn | dmn-migrate > migrated/foo.migrated.dmn
`);

  process.exit(0);
}


function parseTransforms(args) {

  let inputs = args._.slice(2);

  const {
    input,
    output
  } = args;

  if (inputs.length === 0) {
    // read from stdin
    inputs = [ 0 ];
  } else {
    inputs = inputs.map(glob).flat();
  }

  if (!output) {
    return inputs.map(input => [ input, null ]);
  }

  if (output.endsWith(path.sep) || output.endsWith('/')) {
    return inputs.map(input => [ input, path.join(output, input) ]);
  } else {
    return inputs.map(input => [ input, output ]);
  }

}

async function run() {

  let errors = 0;

  const transforms = parseTransforms(args);

  for (const [ input, output ] of transforms) {

    let data;

    try {
      data = fs.readFileSync(input, 'utf8');
    } catch (err) {
      console.error(`Failed to read ${input}: ${err.message}`);
      errors++;

      continue;
    }

    if (input === 0 && !data) {
      console.error('Error: Missing input(s)');
      return process.exit(1);
    }

    try {
      const transformedData = await migrateDiagram(data);

      if (output) {
        fs.mkdirSync(path.dirname(output), { recursive: true });
        fs.writeFileSync(output, transformedData, 'utf8');

        console.log(`Converted ${input} -> ${output}`);
      } else {
        console.log(transformedData);
      }
    } catch (err) {
      console.error(`Failed to migrate ${input}: ${err.message}`);
      errors++;
    }
  }

  if (args.output) {
    console.log('Done.');
  }

  return process.exit(errors && 1 || 0);
}


run().catch(error => {
  console.error(error);

  process.exit(1);
});
